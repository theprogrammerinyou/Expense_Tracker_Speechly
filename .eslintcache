[{"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\index.js":"1","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\App.js":"2","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Details\\Details.jsx":"3","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Details\\styles.js":"4","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\styles.js":"5","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\Main.jsx":"6","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\styles.js":"7","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\Form\\Form.jsx":"8","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\Form\\styles.js":"9","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\List\\List.jsx":"10","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\List\\styles.js":"11","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\context\\context.js":"12","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\context\\contextReducer.js":"13","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\constants\\categories.js":"14","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\utils\\formatDate.js":"15","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\useTransactions.js":"16","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Snackbar\\styles.js":"17","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Snackbar\\Snackbar.jsx":"18","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\InfoCard.jsx":"19"},{"size":451,"mtime":1609337888341,"results":"20","hashOfConfig":"21"},{"size":1690,"mtime":1609349807275,"results":"22","hashOfConfig":"21"},{"size":737,"mtime":1609336549465,"results":"23","hashOfConfig":"21"},{"size":261,"mtime":1609322107428,"results":"24","hashOfConfig":"21"},{"size":580,"mtime":1609321826743,"results":"25","hashOfConfig":"21"},{"size":1323,"mtime":1609349897953,"results":"26","hashOfConfig":"21"},{"size":512,"mtime":1609322327227,"results":"27","hashOfConfig":"21"},{"size":5261,"mtime":1609347358574,"results":"28","hashOfConfig":"21"},{"size":245,"mtime":1609322858606,"results":"29","hashOfConfig":"21"},{"size":1634,"mtime":1609332066520,"results":"30","hashOfConfig":"21"},{"size":416,"mtime":1609323830928,"results":"31","hashOfConfig":"21"},{"size":1150,"mtime":1609346277784,"results":"32","hashOfConfig":"21"},{"size":621,"mtime":1609345321561,"results":"33","hashOfConfig":"21"},{"size":1691,"mtime":1609332340823,"results":"34","hashOfConfig":"21"},{"size":390,"mtime":1609333059298,"results":"35","hashOfConfig":"21"},{"size":1229,"mtime":1609336530523,"results":"36","hashOfConfig":"21"},{"size":206,"mtime":1609346681194,"results":"37","hashOfConfig":"21"},{"size":928,"mtime":1609347677927,"results":"38","hashOfConfig":"21"},{"size":469,"mtime":1609349126806,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"zxmsyn",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\index.js",[],["81","82"],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\App.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Details\\Details.jsx",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Details\\styles.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\styles.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\Main.jsx",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\styles.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\Form\\Form.jsx",["83"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, Button, InputLabel, Select, MenuItem, FormControl } from '@material-ui/core';\r\nimport { ExpenseTrackerContext } from \"../../../context/context\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { useSpeechContext } from '@speechly/react-client';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport useStyles from './styles';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\r\n\r\nconst initialState = {\r\n    amount : '',\r\n    category: '',\r\n    type: 'Income',\r\n    date : formatDate(new Date()),\r\n}\r\n\r\nconst Form = () => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [formData, setFormData] = useState(initialState);\r\n    const { addTransaction } = useContext(ExpenseTrackerContext);\r\n    const { segment } = useSpeechContext();\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const createTransaction = () => {\r\n        if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n        const transaction = { ...formData, amount: Number(formData.amount), id: uuidv4() };\r\n\r\n        setOpen(true);\r\n        addTransaction(transaction);\r\n        setFormData(initialState);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (segment) {\r\n            if (segment.intent.intent === 'add_expense')\r\n            {\r\n                setFormData({ ...formData, type: 'Expense' });\r\n            } else if (segment.intent.intent === 'add_income')\r\n            {\r\n                setFormData({ ...formData, type: 'Income' });\r\n            } else if (segment.isFinal && segment.intent.intent === \"create_transaction\") {\r\n                return createTransaction();\r\n            } else if (segment.isFinal && segment.intent.intent === \"cancel_transaction\") {\r\n                return setFormData(initialState);\r\n            }\r\n\r\n            segment.entities.forEach((e) => {\r\n                const category = `${e.value.charAt(0)}${e.value.slice(1).toLowerCase()}`;\r\n                switch (e.type) {\r\n                    case 'amount':\r\n                        setFormData({ ...formData, amount: e.value });\r\n                        break;\r\n                    case 'category':\r\n                        if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n                            setFormData({ ...formData, type: 'Income', category });\r\n                        } else if (expenseCategories.map((eC) => eC.type).includes(category)) {\r\n                            setFormData({ ...formData, type: 'Expense', category });\r\n                        }\r\n                        \r\n                        break;\r\n                    case 'date':\r\n                        setFormData({ ...formData, date: e.value });\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n\r\n            if (segment.isFinal && formData.amount && formData.type && formData.category && formData.date){\r\n                createTransaction();\r\n            }\r\n        }\r\n    }, [segment])\r\n\r\n    const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n\r\n    \r\n    return (\r\n\r\n        <Grid container spacing={2}>\r\n            <CustomizedSnackbar open = {open} setOpen = {setOpen} />\r\n            <Grid item xs={12}>\r\n                <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n                    {segment && segment.words.map((w) => w.value).join(\" \")}\r\n                </Typography>\r\n            </Grid>\r\n                \r\n            <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n                <InputLabel> Type </InputLabel>\r\n                <Select value = {formData.type} onChange = {(e) => setFormData({...formData, type : e.target.value})} >\r\n                <MenuItem value=\"Income\"> Income </MenuItem>\r\n                <MenuItem value=\"Expense\"> Expense </MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            </Grid>\r\n                \r\n            <Grid item xs={6}>\r\n            <FormControl fullWidth>\r\n                <InputLabel> Category </InputLabel>\r\n                <Select value = {formData.category} onChange = {(e) => setFormData({...formData, category : e.target.value})} >\r\n                    {selectedCategories.map((c) => <MenuItem key = {c.type} value = {c.type}>{c.type}</MenuItem>)}\r\n                </Select>\r\n            </FormControl>\r\n            </Grid>\r\n                \r\n            <Grid item xs = {6}>\r\n                <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\r\n            </Grid>\r\n                \r\n            <Grid item xs = {6}>\r\n                <TextField type = \"date\" label = \"date\" value = {formData.date} onChange = {(e) => setFormData({...formData, date : formatDate(e.target.value)})} fullWidth/>\r\n            </Grid>\r\n\r\n            <Button className = {classes.button} variant = \"outlined\" color = \"primary\" fullWidth onClick = {createTransaction}> Create </Button>\r\n            \r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Form\r\n","E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\Form\\styles.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\List\\List.jsx",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Main\\List\\styles.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\context\\context.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\context\\contextReducer.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\constants\\categories.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\utils\\formatDate.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\useTransactions.js",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Snackbar\\styles.js",[],["84","85"],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\Snackbar\\Snackbar.jsx",[],"E:\\Projects\\FullStackProjects\\ReactProjects\\expense_tracker\\src\\components\\InfoCard.jsx",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":77,"column":8,"nodeType":"92","endLine":77,"endColumn":17,"suggestions":"93"},{"ruleId":"86","replacedBy":"94"},{"ruleId":"88","replacedBy":"95"},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["98"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"101","text":"102"},[3155,3164],"[createTransaction, formData, segment]"]